Before:
  call ale#test#SetDirectory('/testplugin/test/fixers')
  Save g:ale_javascript_prettier_executable
  Save g:ale_javascript_prettier_options

  " Use an invalid global executable, so we don't match it.
  let g:ale_javascript_prettier_executable = 'xxxinvalid'
  let g:ale_javascript_prettier_options = ''

  call ale#test#SetDirectory('/testplugin/test/fixers')
  silent cd ..
  silent cd command_callback
  let g:dir = getcwd()

After:
  let g:ale_has_override = {}

  call ale#test#RestoreDirectory()
  call ale#semver#ResetVersionCache()

Execute(The prettier callback should return the correct default values):
  call ale#test#SetFilename('../prettier-test-files/testfile.js')

  AssertEqual
  \ {
  \   'read_temporary_file': 1,
  \   'command': ale#Escape(g:ale_javascript_prettier_executable)
  \     . ' %t'
  \     . ' --write',
  \ },
  \ ale#fixers#prettier#ApplyFixForVersion(bufnr(''), [])

Execute(The --config option should not be set automatically):
  let g:ale_javascript_prettier_use_local_config = 1
  call ale#test#SetFilename('../prettier-test-files/with_config/testfile.js')

  AssertEqual
  \ {
  \   'read_temporary_file': 1,
  \   'command': ale#Escape(g:ale_javascript_prettier_executable)
  \     . ' %t'
  \     . ' --write',
  \ },
  \ ale#fixers#prettier#ApplyFixForVersion(bufnr(''), [])

Execute(The prettier callback should include custom prettier options):
  let g:ale_javascript_prettier_options = '--no-semi'
  call ale#test#SetFilename('../prettier-test-files/with_config/testfile.js')

  AssertEqual
  \ {
  \   'read_temporary_file': 1,
  \   'command': ale#Escape(g:ale_javascript_prettier_executable)
  \     . ' %t'
  \     . ' --no-semi'
  \     . ' --write',
  \ },
  \ ale#fixers#prettier#ApplyFixForVersion(bufnr(''), [])

Execute(The version check should be correct):
  call ale#test#SetFilename('../prettier-test-files/testfile.js')

  AssertEqual
  \ {
  \   'chain_with': 'ale#fixers#prettier#ApplyFixForVersion',
  \   'command': ale#Escape(g:ale_javascript_prettier_executable)
  \     . ' --version',
  \ },
  \ ale#fixers#prettier#Fix(bufnr(''))

Execute(--stdin-filepath should be used when prettier is new enough):
  let g:ale_javascript_prettier_options = '--no-semi'
  call ale#test#SetFilename('../prettier-test-files/with_config/testfile.js')

  AssertEqual
  \ {
  \   'command': ale#path#CdString(expand('%:p:h'))
  \     . ale#Escape(g:ale_javascript_prettier_executable)
  \     . ' --no-semi'
  \     . ' --stdin-filepath %s --stdin',
  \ },
  \ ale#fixers#prettier#ApplyFixForVersion(bufnr(''), ['1.6.0'])

Execute(The version number should be cached):
  call ale#test#SetFilename('../prettier-test-files/with_config/testfile.js')

  " Call the second callback with the version output.
  call ale#fixers#prettier#ApplyFixForVersion(bufnr(''), ['1.6.0'])

  " Call it again without the version output. We should use the newer command.
  AssertEqual
  \ {
  \   'command': ale#path#CdString(expand('%:p:h'))
  \     . ale#Escape(g:ale_javascript_prettier_executable)
  \     . ' --stdin-filepath %s --stdin',
  \ },
  \ ale#fixers#prettier#ApplyFixForVersion(bufnr(''), [])

Execute(Should set --parser based on filetype, TypeScript):
  call ale#test#SetFilename('../prettier-test-files/testfile')

  set filetype=typescript

  AssertEqual
  \ {
  \   'command': ale#path#CdString(expand('%:p:h'))
  \     . ale#Escape(g:ale_javascript_prettier_executable)
  \     . ' --parser typescript'
  \     . ' --stdin-filepath %s --stdin',
  \ },
  \ ale#fixers#prettier#ApplyFixForVersion(bufnr(''), ['1.6.0'])

Execute(Should set --parser based on filetype, CSS):
  call ale#test#SetFilename('../prettier-test-files/testfile')

  set filetype=css

  AssertEqual
  \ {
  \   'command': ale#path#CdString(expand('%:p:h'))
  \     . ale#Escape(g:ale_javascript_prettier_executable)
  \     . ' --parser css'
  \     . ' --stdin-filepath %s --stdin',
  \ },
  \ ale#fixers#prettier#ApplyFixForVersion(bufnr(''), ['1.6.0'])

Execute(Should set --parser based on filetype, LESS):
  call ale#test#SetFilename('../prettier-test-files/testfile')

  set filetype=less

  AssertEqual
  \ {
  \   'command': ale#path#CdString(expand('%:p:h'))
  \     . ale#Escape(g:ale_javascript_prettier_executable)
  \     . ' --parser less'
  \     . ' --stdin-filepath %s --stdin',
  \ },
  \ ale#fixers#prettier#ApplyFixForVersion(bufnr(''), ['1.6.0'])

Execute(Should set --parser based on filetype, SCSS):
  call ale#test#SetFilename('../prettier-test-files/testfile')

  set filetype=scss

  AssertEqual
  \ {
  \   'command': ale#path#CdString(expand('%:p:h'))
  \     . ale#Escape(g:ale_javascript_prettier_executable)
  \     . ' --parser scss'
  \     . ' --stdin-filepath %s --stdin',
  \ },
  \ ale#fixers#prettier#ApplyFixForVersion(bufnr(''), ['1.6.0'])

Execute(Should set --parser based on filetype, JSON):
  call ale#test#SetFilename('../prettier-test-files/testfile')

  set filetype=json

  AssertEqual
  \ {
  \   'command': ale#path#CdString(expand('%:p:h'))
  \     . ale#Escape(g:ale_javascript_prettier_executable)
  \     . ' --parser json'
  \     . ' --stdin-filepath %s --stdin',
  \ },
  \ ale#fixers#prettier#ApplyFixForVersion(bufnr(''), ['1.6.0'])

Execute(Should set --parser based on filetype, JSON5):
  call ale#test#SetFilename('../prettier-test-files/testfile')

  set filetype=json5

  AssertEqual
  \ {
  \   'command': ale#path#CdString(expand('%:p:h'))
  \     . ale#Escape(g:ale_javascript_prettier_executable)
  \     . ' --parser json5'
  \     . ' --stdin-filepath %s --stdin',
  \ },
  \ ale#fixers#prettier#ApplyFixForVersion(bufnr(''), ['1.6.0'])

Execute(Should set --parser based on filetype, GraphQL):
  call ale#test#SetFilename('../prettier-test-files/testfile')

  set filetype=graphql

  AssertEqual
  \ {
  \   'command': ale#path#CdString(expand('%:p:h'))
  \     . ale#Escape(g:ale_javascript_prettier_executable)
  \     . ' --parser graphql'
  \     . ' --stdin-filepath %s --stdin',
  \ },
  \ ale#fixers#prettier#ApplyFixForVersion(bufnr(''), ['1.6.0'])

Execute(Should set --parser based on filetype, Markdown):
  call ale#test#SetFilename('../prettier-test-files/testfile')

  set filetype=markdown

  AssertEqual
  \ {
  \   'command': ale#path#CdString(expand('%:p:h'))
  \     . ale#Escape(g:ale_javascript_prettier_executable)
  \     . ' --parser markdown'
  \     . ' --stdin-filepath %s --stdin',
  \ },
  \ ale#fixers#prettier#ApplyFixForVersion(bufnr(''), ['1.6.0'])

Execute(Should set --parser based on filetype, Vue):
  call ale#test#SetFilename('../prettier-test-files/testfile')

  set filetype=vue

  AssertEqual
  \ {
  \   'command': ale#path#CdString(expand('%:p:h'))
  \     . ale#Escape(g:ale_javascript_prettier_executable)
  \     . ' --parser vue'
  \     . ' --stdin-filepath %s --stdin',
  \ },
  \ ale#fixers#prettier#ApplyFixForVersion(bufnr(''), ['1.6.0'])

Execute(Should set --parser based on filetype, YAML):
  call ale#test#SetFilename('../prettier-test-files/testfile')

  set filetype=yaml

  AssertEqual
  \ {
  \   'command': ale#path#CdString(expand('%:p:h'))
  \     . ale#Escape(g:ale_javascript_prettier_executable)
  \     . ' --parser yaml'
  \     . ' --stdin-filepath %s --stdin',
  \ },
  \ ale#fixers#prettier#ApplyFixForVersion(bufnr(''), ['1.6.0'])

Execute(Should set --parser based on first filetype of multiple filetypes):
  call ale#test#SetFilename('../prettier-test-files/testfile')

  set filetype=css.scss

  AssertEqual
  \ {
  \   'command': ale#path#CdString(expand('%:p:h'))
  \     . ale#Escape(g:ale_javascript_prettier_executable)
  \     . ' --parser css'
  \     . ' --stdin-filepath %s --stdin',
  \ },
  \ ale#fixers#prettier#ApplyFixForVersion(bufnr(''), ['1.6.0'])

Execute(The prettier_d post-processor should permit regular JavaScript content):
  AssertEqual
  \ [
  \   'const x = ''Error: foo''',
  \   'const y = 3',
  \ ],
  \ ale#fixers#prettier#ProcessPrettierDOutput(bufnr(''), [
  \   'const x = ''Error: foo''',
  \   'const y = 3',
  \ ])

Execute(The prettier_d post-processor should handle error messages correctly):
  AssertEqual
  \ [],
  \ ale#fixers#prettier#ProcessPrettierDOutput(bufnr(''), [
  \   'SyntaxError: Unexpected token, expected "," (36:28)',
  \ ])
