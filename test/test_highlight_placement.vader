Before:
  Save g:ale_enabled
  Save g:ale_set_signs

  function! GenerateResults(buffer, output)
    return [
    \ {
    \   'lnum': 1,
    \   'col': 1,
    \   'type': 'E',
    \   'text': 'foo',
    \ },
    \ {
    \   'lnum': 2,
    \   'col': 1,
    \   'type': 'W',
    \   'text': 'bar',
    \ },
    \ {
    \   'lnum': 3,
    \   'col': 5,
    \   'type': 'E',
    \   'text': 'wat',
    \ },
    \]
  endfunction

  " We don't care what the IDs are, just that we have some matches.
  " The IDs are generated.
  function! GetMatchesWithoutIDs() abort
    let l:list = getmatches()

    for l:item in l:list
      call remove(l:item, 'id')
    endfor

    return l:list
  endfunction

  call ale#linter#Define('testft', {
  \ 'name': 'x',
  \ 'executable': has('win32') ? 'cmd': 'echo',
  \ 'command': has('win32') ? 'echo' : '/bin/sh -c ''echo''',
  \ 'callback': 'GenerateResults',
  \})
  highlight link SomeOtherGroup SpellBad

After:
  Restore

  unlet! g:items
  unlet! b:ale_enabled

  delfunction GenerateResults
  call ale#linter#Reset()
  let g:ale_buffer_info = {}
  call clearmatches()
  highlight clear SomeOtherGroup

Given testft(A Javscript file with warnings/errors):
  foo
  bar
  baz wat
  line four

Execute(Highlights should be set when a linter runs):
  call ale#Lint()
  call ale#engine#WaitForJobs(2000)

  AssertEqual
  \ [
  \   {'group': 'ALEError', 'priority': 10, 'pos1': [1, 1, 1]},
  \   {'group': 'ALEWarning', 'priority': 10, 'pos1': [2, 1, 1]},
  \   {'group': 'ALEError', 'priority': 10, 'pos1': [3, 5, 1]}
  \ ],
  \ GetMatchesWithoutIDs()

" This test is important for preventing ALE from showing highlights for
" the wrong files.
Execute(Highlights set by ALE should be removed when buffer cleanup is done):
  call ale#engine#InitBufferInfo(bufnr('%'))

  call ale#highlight#SetHighlights(bufnr('%'), [
  \ {'bufnr': bufnr('%'), 'type': 'E', 'lnum': 3, 'col': 2},
  \])

  AssertEqual
  \ [{'group': 'ALEError', 'priority': 10, 'pos1': [3, 2, 1]}],
  \ GetMatchesWithoutIDs()

  call ale#engine#Cleanup(bufnr('%'))

  AssertEqual [], GetMatchesWithoutIDs()

Execute(Highlights should be cleared when buffers are hidden):
  call ale#engine#InitBufferInfo(bufnr('%'))
  " The second item should be ignored, as it has no column infomration.
  let g:ale_buffer_info[bufnr('%')].loclist =  [
  \ {'bufnr': bufnr('%'), 'type': 'E', 'lnum': 3, 'col': 2},
  \ {'bufnr': bufnr('%'), 'type': 'E', 'lnum': 4, 'col': 0},
  \]
  call ale#highlight#SetHighlights(
  \ bufnr('%'),
  \ g:ale_buffer_info[bufnr('%')].loclist
  \)

  AssertEqual 1, len(GetMatchesWithoutIDs()), 'The highlights weren''t initially set!'

  call ale#highlight#BufferHidden(bufnr('%'))

  AssertEqual 0, len(GetMatchesWithoutIDs()), 'The highlights weren''t cleared!'

  call ale#highlight#UpdateHighlights()

  AssertEqual 1, len(GetMatchesWithoutIDs()), 'The highlights weren''t set again!'

Execute(Only ALE highlights should be restored when buffers are restored):
  call ale#engine#InitBufferInfo(bufnr('%'))
  let g:ale_buffer_info[bufnr('%')].loclist =  [
  \ {'bufnr': bufnr('%'), 'type': 'E', 'lnum': 3, 'col': 2},
  \]
  call ale#highlight#SetHighlights(
  \ bufnr('%'),
  \ g:ale_buffer_info[bufnr('%')].loclist
  \)

  call matchaddpos('SomeOtherGroup', [[1, 1, 1]])

  " We should have both highlights.
  AssertEqual
  \ [
  \   {'group': 'ALEError', 'priority': 10, 'pos1': [3, 2, 1]},
  \   {'group': 'SomeOtherGroup', 'priority': 10, 'pos1': [1, 1, 1]},
  \ ],
  \ GetMatchesWithoutIDs()

  call ale#highlight#BufferHidden(bufnr('%'))

  " We should remove our highlight, but not the other one.
  AssertEqual
  \ [
  \   {'group': 'SomeOtherGroup', 'priority': 10, 'pos1': [1, 1, 1]}
  \ ],
  \ GetMatchesWithoutIDs()

  call ale#highlight#UpdateHighlights()

  " Our highlight should apper again.
  AssertEqual
  \ [
  \   {'group': 'SomeOtherGroup', 'priority': 10, 'pos1': [1, 1, 1]},
  \   {'group': 'ALEError', 'priority': 10, 'pos1': [3, 2, 1]},
  \ ],
  \ GetMatchesWithoutIDs()

Execute(Higlight end columns should set an appropriate size):
  call ale#highlight#SetHighlights(bufnr('%'), [
  \ {'bufnr': bufnr('%'), 'type': 'E', 'lnum': 3, 'col': 2, 'end_col': 5},
  \ {'bufnr': bufnr('%'), 'type': 'W', 'lnum': 4, 'col': 1, 'end_col': 5},
  \])

  AssertEqual
  \ [
  \   {'group': 'ALEError', 'priority': 10, 'pos1': [3, 2, 4]},
  \   {'group': 'ALEWarning', 'priority': 10, 'pos1': [4, 1, 5]},
  \ ],
  \ GetMatchesWithoutIDs()

Execute(Higlight end columns should set an appropriate size):
  call ale#highlight#SetHighlights(bufnr('%'), [
  \ {'bufnr': bufnr('%') - 1, 'type': 'E', 'lnum': 1, 'col': 1},
  \ {'bufnr': bufnr('%'), 'type': 'E', 'lnum': 1, 'col': 1},
  \ {'bufnr': bufnr('%'), 'type': 'E', 'lnum': 2, 'col': 1},
  \ {'bufnr': bufnr('%'), 'type': 'E', 'sub_type': 'style', 'lnum': 3, 'col': 1},
  \ {'bufnr': bufnr('%'), 'type': 'W', 'lnum': 4, 'col': 1},
  \ {'bufnr': bufnr('%'), 'type': 'W', 'lnum': 5, 'col': 1},
  \ {'bufnr': bufnr('%'), 'type': 'W', 'sub_type': 'style', 'lnum': 6, 'col': 1},
  \ {'bufnr': bufnr('%'), 'type': 'I', 'lnum': 7, 'col': 1},
  \ {'bufnr': bufnr('%') + 1, 'type': 'E', 'lnum': 1, 'col': 1},
  \])

  AssertEqual
  \ [
  \   {'group': 'ALEError', 'priority': 10, 'pos1': [1, 1, 1]},
  \   {'group': 'ALEError', 'priority': 10, 'pos1': [2, 1, 1]},
  \   {'group': 'ALEStyleError', 'priority': 10, 'pos1': [3, 1, 1]},
  \   {'group': 'ALEWarning', 'priority': 10, 'pos1': [4, 1, 1]},
  \   {'group': 'ALEWarning', 'priority': 10, 'pos1': [5, 1, 1]},
  \   {'group': 'ALEStyleWarning', 'priority': 10, 'pos1': [6, 1, 1]},
  \   {'group': 'ALEInfo', 'priority': 10, 'pos1': [7, 1, 1]},
  \ ],
  \ GetMatchesWithoutIDs()

Execute(Highlighting should support errors spanning many lines):
  let g:items = [
  \ {'bufnr': bufnr(''), 'type': 'E', 'lnum': 1, 'col': 1, 'end_lnum': 10, 'end_col': 3},
  \]

  call ale#highlight#SetHighlights(bufnr(''), g:items)

  " We should set 2 highlights for the item, as we can only add 8 at a time.
  AssertEqual
  \ [
  \   {
  \     'group': 'ALEError', 'priority': 10, 'pos1': [1, 1, 1073741824],
  \     'pos2': [2], 'pos3': [3], 'pos4': [4], 'pos5': [5], 'pos6': [6],
  \     'pos7': [7], 'pos8': [8],
  \   },
  \   {
  \     'group': 'ALEError', 'priority': 10,
  \     'pos1': [9], 'pos2': [10, 1, 3]
  \   },
  \ ],
  \ GetMatchesWithoutIDs()

Execute(Highlights should always be cleared when the buffer highlight list is empty):
  " Add our highlights and something else.
  call matchaddpos('ALEError', [[1, 1, 1]])
  call matchaddpos('SomeOtherGroup', [[1, 1, 1]])

  AssertEqual
  \ [
  \   {'group': 'ALEError', 'priority': 10, 'pos1': [1, 1, 1]},
  \   {'group': 'SomeOtherGroup', 'priority': 10, 'pos1': [1, 1, 1]},
  \ ],
  \ GetMatchesWithoutIDs()

  " Set the List we use for holding highlights for buffers.
  let b:ale_highlight_items = []

  " Call the function for updating the highlights called when buffers
  " are entered, or when problems are presented.
  call ale#highlight#UpdateHighlights()

  " Check that we remove our highlights.
  AssertEqual
  \ [
  \   {'group': 'SomeOtherGroup', 'priority': 10, 'pos1': [1, 1, 1]},
  \ ],
  \ GetMatchesWithoutIDs()

Execute(Highlights should be cleared when ALE is disabled):
  let g:ale_enabled = 1
  call ale#highlight#SetHighlights(bufnr(''), [
  \ {'bufnr': bufnr(''), 'type': 'E', 'lnum': 1, 'col': 1, 'end_lnum': 10, 'end_col': 3},
  \])

  let g:ale_enabled = 0
  call ale#highlight#UpdateHighlights()

  AssertEqual [], GetMatchesWithoutIDs()

  let g:ale_enabled = 1
  call ale#highlight#SetHighlights(bufnr(''), [
  \ {'bufnr': bufnr(''), 'type': 'E', 'lnum': 1, 'col': 1, 'end_lnum': 10, 'end_col': 3},
  \])

  let b:ale_enabled = 0
  call ale#highlight#UpdateHighlights()

  AssertEqual [], GetMatchesWithoutIDs()

Execute(Line highlights should be set when signs are disabled):
  let g:ale_set_signs = 0

  call ale#highlight#SetHighlights(bufnr(''), [
  \ {'bufnr': bufnr(''), 'type': 'E', 'lnum': 1, 'col': 1},
  \ {'bufnr': bufnr(''), 'type': 'W', 'lnum': 2, 'col': 1},
  \ {'bufnr': bufnr(''), 'type': 'I', 'lnum': 3, 'col': 1},
  \])

  AssertEqual
  \ [
  \   {'group': 'ALEError', 'priority': 10, 'pos1': [1, 1, 1]},
  \   {'group': 'ALEWarning', 'priority': 10, 'pos1': [2, 1, 1]},
  \   {'group': 'ALEInfo', 'priority': 10, 'pos1': [3, 1, 1]},
  \   {'group': 'ALEErrorLine', 'priority': 10, 'pos1': [1]},
  \   {'group': 'ALEWarningLine', 'priority': 10, 'pos1': [2]},
  \   {'group': 'ALEInfoLine', 'priority': 10, 'pos1': [3]},
  \ ],
  \ GetMatchesWithoutIDs()
