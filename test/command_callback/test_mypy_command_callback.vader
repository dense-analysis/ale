Before:
  Save g:ale_python_mypy_executable
  Save g:ale_python_mypy_options
  Save g:ale_python_mypy_use_global

  unlet! g:ale_python_mypy_executable
  unlet! g:ale_python_mypy_options
  unlet! g:ale_python_mypy_use_global

  let b:bin_dir = has('win32') ? 'Scripts' : 'bin'

  runtime ale_linters/python/mypy.vim

  call ale#test#SetDirectory('/testplugin/test/command_callback')
  call ale#test#SetFilename('test.py')

After:
  Restore

  unlet! b:bin_dir
  unlet! b:executable

  call ale#test#RestoreDirectory()
  call ale#linter#Reset()

Execute(The mypy callbacks should return the correct default values):
  AssertEqual
  \ 'mypy',
  \ ale_linters#python#mypy#GetExecutable(bufnr(''))
  AssertEqual
  \ 'cd ' . ale#Escape(g:dir) . ' && ' . ale#Escape('mypy')
  \   . ' --show-column-numbers  '
  \   . '--shadow-file %s %t %s',
  \ ale_linters#python#mypy#GetCommand(bufnr(''))

Execute(The mypy executable should be configurable, and escaped properly):
  let g:ale_python_mypy_executable = 'executable with spaces'

  AssertEqual
  \ 'executable with spaces',
  \ ale_linters#python#mypy#GetExecutable(bufnr(''))
  AssertEqual
  \ 'cd ' . ale#Escape(g:dir) . ' && ' . ale#Escape('executable with spaces')
  \   . ' --show-column-numbers  '
  \   . '--shadow-file %s %t %s',
  \ ale_linters#python#mypy#GetCommand(bufnr(''))

Execute(The mypy command callback should let you set options):
  let g:ale_python_mypy_options = '--some-option'

  AssertEqual
  \ 'cd ' . ale#Escape(g:dir) . ' && ' . ale#Escape('mypy')
  \   . ' --show-column-numbers --some-option '
  \   . '--shadow-file %s %t %s',
  \ ale_linters#python#mypy#GetCommand(bufnr(''))

Execute(The mypy command should switch directories to the detected project root):
  silent execute 'file ' . fnameescape(g:dir . '/python_paths/no_virtualenv/subdir/foo/bar.py')

  AssertEqual
  \ 'mypy',
  \ ale_linters#python#mypy#GetExecutable(bufnr(''))
  AssertEqual
  \ 'cd ' . ale#Escape(ale#path#Winify(g:dir . '/python_paths/no_virtualenv/subdir'))
  \   . ' && ' . ale#Escape('mypy')
  \   . ' --show-column-numbers  '
  \   . '--shadow-file %s %t %s',
  \ ale_linters#python#mypy#GetCommand(bufnr(''))

Execute(The mypy callbacks should detect virtualenv directories and switch to the project root):
  silent execute 'file ' . fnameescape(g:dir . '/python_paths/with_virtualenv/subdir/foo/bar.py')

  let b:executable = ale#path#Winify(g:dir . '/python_paths/with_virtualenv/env/' . b:bin_dir . '/mypy')

  AssertEqual
  \ b:executable,
  \ ale_linters#python#mypy#GetExecutable(bufnr(''))
  AssertEqual
  \   'cd ' . ale#Escape(ale#path#Winify(g:dir . '/python_paths/with_virtualenv/subdir'))
  \   . ' && ' . ale#Escape(b:executable)
  \   . ' --show-column-numbers  '
  \   . '--shadow-file %s %t %s',
  \ ale_linters#python#mypy#GetCommand(bufnr(''))

Execute(You should able able to use the global mypy instead):
  silent execute 'file ' . fnameescape(g:dir . '/python_paths/with_virtualenv/subdir/foo/bar.py')
  let g:ale_python_mypy_use_global = 1

  AssertEqual
  \ 'mypy',
  \ ale_linters#python#mypy#GetExecutable(bufnr(''))
  AssertEqual
  \   'cd ' . ale#Escape(ale#path#Winify(g:dir . '/python_paths/with_virtualenv/subdir'))
  \   . ' && ' . ale#Escape('mypy')
  \   . ' --show-column-numbers  '
  \   . '--shadow-file %s %t %s',
  \ ale_linters#python#mypy#GetCommand(bufnr(''))
