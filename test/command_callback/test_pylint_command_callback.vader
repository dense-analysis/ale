Before:
  Save g:ale_python_pylint_executable
  Save g:ale_python_pylint_options
  Save g:ale_python_pylint_use_global

  unlet! g:ale_python_pylint_executable
  unlet! g:ale_python_pylint_options
  unlet! g:ale_python_pylint_use_global

  runtime ale_linters/python/pylint.vim
  call ale#test#SetDirectory('/testplugin/test/command_callback')

  let b:bin_dir = has('win32') ? 'Scripts' : 'bin'

  " Consider that a global config file may be put in home directory
  let b:pylintrc = ''
  if filereadable(expand('~/.pylintrc'))
    let b:pylintrc = ' --rcfile="' . expand('~/.pylintrc') . '"'
  elseif filereadable(expand('~/pylintrc'))
    let b:pylintrc = ' --rcfile="' . expand('~/pylintrc') . '"'
  endif

  let b:command_opts = ' --output-format text --msg-template="{path}:{line}:{column}: {msg_id} ({symbol}) {msg}" --reports n'
  let b:command_tail = b:command_opts . b:pylintrc . ' %s'
  unlet! b:pylintrc

After:
  Restore

  call ale#test#RestoreDirectory()
  call ale#linter#Reset()

  unlet! b:bin_dir
  unlet! b:command_opts
  unlet! b:executable

Execute(The pylint callbacks should return the correct default values):
  AssertEqual
  \ 'pylint',
  \ ale_linters#python#pylint#GetExecutable(bufnr(''))
  AssertEqual
  \ ale#Escape('pylint') . ' ' . b:command_tail,
  \ ale_linters#python#pylint#GetCommand(bufnr(''))

Execute(The pylint executable should be configurable, and escaped properly):
  let g:ale_python_pylint_executable = 'executable with spaces'

  AssertEqual
  \ 'executable with spaces',
  \ ale_linters#python#pylint#GetExecutable(bufnr(''))
  AssertEqual
  \ ale#Escape('executable with spaces') . ' ' . b:command_tail,
  \ ale_linters#python#pylint#GetCommand(bufnr(''))

Execute(The pylint command callback should let you set options):
  let g:ale_python_pylint_options = '--some-option'

  AssertEqual
  \ ale#Escape('pylint') . ' --some-option' . b:command_tail,
  \ ale_linters#python#pylint#GetCommand(bufnr(''))

Execute(The pylint callbacks shouldn't detect virtualenv directories where they don't exist):
  silent execute 'file ' . fnameescape(g:dir . '/python_paths/no_virtualenv/subdir/foo/bar.py')

  AssertEqual
  \ 'pylint',
  \ ale_linters#python#pylint#GetExecutable(bufnr(''))
  AssertEqual
  \ ale#Escape('pylint') . ' ' . b:command_tail,
  \ ale_linters#python#pylint#GetCommand(bufnr(''))

Execute(The pylint callbacks should detect virtualenv directories):
  silent execute 'file ' . fnameescape(g:dir . '/python_paths/with_virtualenv/subdir/foo/bar.py')

  let b:executable = ale#path#Simplify(
  \ g:dir . '/python_paths/with_virtualenv/env/' . b:bin_dir . '/pylint'
  \)

  AssertEqual
  \ b:executable,
  \ ale_linters#python#pylint#GetExecutable(bufnr(''))

  AssertEqual
  \ ale#Escape(b:executable) . ' ' . b:command_tail,
  \ ale_linters#python#pylint#GetCommand(bufnr(''))

Execute(You should able able to use the global pylint instead):
  silent execute 'file ' . fnameescape(g:dir . '/python_paths/with_virtualenv/subdir/foo/bar.py')
  let g:ale_python_pylint_use_global = 1

  AssertEqual
  \ 'pylint',
  \ ale_linters#python#pylint#GetExecutable(bufnr(''))
  AssertEqual
  \ ale#Escape('pylint') . ' ' . b:command_tail,
  \ ale_linters#python#pylint#GetCommand(bufnr(''))

Execute(The pylint command callback should detect pylintrc config in parent directory):
  call ale#test#SetFilename('pylint_project/src/__init__.py')
  AssertEqual
  \ ale#Escape('pylint') . ' ' . b:command_opts . ' --rcfile="' . g:dir . '/pylint_project/pylintrc' . '" %s',
  \ ale_linters#python#pylint#GetCommand(bufnr(''))

Execute(The pylint command callback should detect the nearest pylintrc config):
  call ale#test#SetFilename('pylint_project/nested/src/__init__.py')
  AssertEqual
  \ ale#Escape('pylint') . ' ' . b:command_opts . ' --rcfile="' . g:dir . '/pylint_project/nested/.pylintrc' . '" %s',
  \ ale_linters#python#pylint#GetCommand(bufnr(''))
