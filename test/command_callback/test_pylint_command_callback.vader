Before:
  runtime ale_linters/python/pylint.vim
  call ale#test#SetDirectory('/testplugin/test/command_callback')

  let b:command_tail = ' --output-format text --msg-template="{path}:{line}:{column}: {msg_id} ({symbol}) {msg}" --reports n %s'

After:
  call ale#test#RestoreDirectory()
  call ale#linter#Reset()
  let g:ale_python_pylint_executable = 'pylint'
  let g:ale_python_pylint_options = ''
  let g:ale_python_pylint_use_global = 0

Execute(The pylint callbacks should return the correct default values):
  AssertEqual
  \ 'pylint',
  \ ale_linters#python#pylint#GetExecutable(bufnr(''))
  AssertEqual
  \ '''pylint'' ' . b:command_tail,
  \ ale_linters#python#pylint#GetCommand(bufnr(''))

Execute(The pylint executable should be configurable, and escaped properly):
  let g:ale_python_pylint_executable = 'executable with spaces'

  AssertEqual
  \ 'executable with spaces',
  \ ale_linters#python#pylint#GetExecutable(bufnr(''))
  AssertEqual
  \ '''executable with spaces'' ' . b:command_tail,
  \ ale_linters#python#pylint#GetCommand(bufnr(''))

Execute(The pylint command callback should let you set options):
  let g:ale_python_pylint_options = '--some-option'

  AssertEqual
  \ '''pylint'' --some-option' . b:command_tail,
  \ ale_linters#python#pylint#GetCommand(bufnr(''))

Execute(The pylint callbacks shouldn't detect virtualenv directories where they don't exist):
  silent execute 'file ' . fnameescape(g:dir . '/python_paths/no_virtualenv/subdir/foo/bar.py')

  AssertEqual
  \ 'pylint',
  \ ale_linters#python#pylint#GetExecutable(bufnr(''))
  AssertEqual
  \ '''pylint'' ' . b:command_tail,
  \ ale_linters#python#pylint#GetCommand(bufnr(''))

Execute(The pylint callbacks should detect virtualenv directories):
  silent execute 'file ' . fnameescape(g:dir . '/python_paths/with_virtualenv/subdir/foo/bar.py')

  AssertEqual
  \ g:dir . '/python_paths/with_virtualenv/env/bin/pylint',
  \ ale_linters#python#pylint#GetExecutable(bufnr(''))
  AssertEqual
  \ ''''. g:dir . '/python_paths/with_virtualenv/env/bin/pylint'' ' . b:command_tail,
  \ ale_linters#python#pylint#GetCommand(bufnr(''))

Execute(You should able able to use the global pylint instead):
  silent execute 'file ' . fnameescape(g:dir . '/python_paths/with_virtualenv/subdir/foo/bar.py')
  let g:ale_python_pylint_use_global = 1

  AssertEqual
  \ 'pylint',
  \ ale_linters#python#pylint#GetExecutable(bufnr(''))
  AssertEqual
  \ '''pylint'' ' . b:command_tail,
  \ ale_linters#python#pylint#GetCommand(bufnr(''))
