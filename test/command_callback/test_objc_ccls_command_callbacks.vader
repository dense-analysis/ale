Before:
  call ale#assert#SetUpLinterTest('objc', 'ccls')

After:
  call ale#assert#TearDownLinterTest()

Execute(The project root should be detected correctly using compile_commands.json file):
  call ale#test#SetFilename(tempname() . '/dummy.m')

  AssertLSPProject ''

  call ale#test#SetFilename('ccls_paths/with_compile_commands_json/dummy.m')

  AssertLSPProject ale#path#Simplify(g:dir . '/ccls_paths/with_compile_commands_json')

Execute(The project root should be detected correctly using .ccls file):
  call ale#test#SetFilename(tempname() . '/dummy.m')

  AssertLSPProject ''

  call ale#test#SetFilename('ccls_paths/with_ccls/dummy.m')

  AssertLSPProject ale#path#Simplify(g:dir . '/ccls_paths/with_ccls')

Execute(The project root should be detected correctly using .ccls-root file):
  call ale#test#SetFilename(tempname() . '/dummy.m')

  AssertLSPProject ''

  call ale#test#SetFilename('ccls_paths/with_ccls-root/dummy.m')

  AssertLSPProject ale#path#Simplify(g:dir . '/ccls_paths/with_ccls-root')

Execute(The executable should be configurable):
  AssertLinter 'ccls', ale#Escape('ccls')

  let b:ale_objc_ccls_executable = 'foobar'

  AssertLinter 'foobar', ale#Escape('foobar')

Execute(The initialization options should be configurable):
  AssertLSPOptions {}

  let b:ale_objc_ccls_init_options = { 'cacheDirectory': '/tmp/ccls' }

  AssertLSPOptions { 'cacheDirectory': '/tmp/ccls' }
