Before:
  " Make sure the c.vim file is loaded first.
  call ale#c#FindProjectRoot(bufnr(''))

  Save g:ale_c_parse_makefile
  Save g:__ale_c_project_filenames

  let g:original_project_filenames = g:__ale_c_project_filenames

  " Remove the .git/HEAD dir for C import paths for these tests.
  " The tests run inside of a git repo.
  let g:__ale_c_project_filenames = filter(
  \ copy(g:__ale_c_project_filenames),
  \ 'v:val isnot# ''.git/HEAD'''
  \)

  let g:ale_c_parse_makefile = 0

After:
  unlet! g:original_project_filenames

  call ale#assert#TearDownLinterTest()

Execute(The C GCC handler should include 'include' directories for projects with a Makefile):
  call ale#assert#SetUpLinterTest('c', 'gcc')
  call ale#test#SetFilename('../test_c_projects/makefile_project/subdir/file.c')
  let g:ale_c_gcc_options = ''

  AssertLinter 'gcc',
  \ ale#Escape('gcc')
  \   . ' -S -x c -fsyntax-only'
  \   . ' -iquote ' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/makefile_project/subdir'))
  \   . ' -I' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/makefile_project/include'))
  \   . ' -'

Execute(The C GCC handler should include 'include' directories for projects with a configure file):
  call ale#assert#SetUpLinterTest('c', 'gcc')
  call ale#test#SetFilename('../test_c_projects/configure_project/subdir/file.c')
  let g:ale_c_gcc_options = ''

  AssertLinter 'gcc',
  \ ale#Escape('gcc')
  \   . ' -S -x c -fsyntax-only '
  \   . '-iquote ' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/configure_project/subdir'))
  \   . ' -I' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/configure_project/include'))
  \   . ' -'

Execute(The C GCC handler should include root directories for projects with .h files in them):
  call ale#assert#SetUpLinterTest('c', 'gcc')
  call ale#test#SetFilename('../test_c_projects/h_file_project/subdir/file.c')
  let g:ale_c_gcc_options = ''

  AssertLinter 'gcc',
  \ ale#Escape('gcc')
  \   . ' -S -x c -fsyntax-only '
  \   . '-iquote ' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/h_file_project/subdir'))
  \   . ' -I' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/h_file_project'))
  \   . ' -'

Execute(The C GCC handler should include root directories for projects with .hpp files in them):
  call ale#assert#SetUpLinterTest('c', 'gcc')
  call ale#test#SetFilename('../test_c_projects/hpp_file_project/subdir/file.c')
  let g:ale_c_gcc_options = ''

  AssertLinter 'gcc',
  \ ale#Escape('gcc')
  \   . ' -S -x c -fsyntax-only '
  \   . '-iquote ' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/hpp_file_project/subdir'))
  \   . ' -I' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/hpp_file_project'))
  \   . ' -'

Execute(The C Clang handler should include 'include' directories for projects with a Makefile):
  call ale#assert#SetUpLinterTest('c', 'clang')
  call ale#test#SetFilename('../test_c_projects/makefile_project/subdir/file.c')
  let g:ale_c_clang_options = ''

  AssertLinter 'clang',
  \   ale#Escape('clang')
  \   . ' -S -x c -fsyntax-only '
  \   . '-iquote ' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/makefile_project/subdir'))
  \   . ' -I' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/makefile_project/include'))
  \   . ' -'

Execute(The C Clang handler should include 'include' directories for projects with a configure file):
  call ale#assert#SetUpLinterTest('c', 'clang')
  call ale#test#SetFilename('../test_c_projects/h_file_project/subdir/file.c')
  let g:ale_c_clang_options = ''

  AssertLinter 'clang',
  \   ale#Escape('clang')
  \   . ' -S -x c -fsyntax-only '
  \   . '-iquote ' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/h_file_project/subdir'))
  \   . ' -I' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/h_file_project'))
  \   . ' -'

Execute(The C Clang handler should include root directories for projects with .h files in them):
  call ale#assert#SetUpLinterTest('c', 'clang')
  call ale#test#SetFilename('../test_c_projects/h_file_project/subdir/file.c')
  let g:ale_c_clang_options = ''

  AssertLinter 'clang',
  \   ale#Escape('clang')
  \   . ' -S -x c -fsyntax-only '
  \   . '-iquote ' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/h_file_project/subdir'))
  \   . ' -I' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/h_file_project'))
  \   . ' -'

Execute(The C Clang handler should include root directories for projects with .hpp files in them):
  call ale#assert#SetUpLinterTest('c', 'clang')
  call ale#test#SetFilename('../test_c_projects/hpp_file_project/subdir/file.c')
  let g:ale_c_clang_options = ''

  AssertLinter 'clang',
  \   ale#Escape('clang')
  \   . ' -S -x c -fsyntax-only '
  \   . '-iquote ' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/hpp_file_project/subdir'))
  \   . ' -I' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/hpp_file_project'))
  \   . ' -'

Execute(The C++ GCC handler should include 'include' directories for projects with a Makefile):
  call ale#assert#SetUpLinterTest('cpp', 'gcc')
  call ale#test#SetFilename('../test_c_projects/makefile_project/subdir/file.cpp')
  let g:ale_cpp_gcc_options = ''

  AssertLinter 'gcc',
  \   ale#Escape('gcc')
  \   . ' -S -x c++ -fsyntax-only '
  \   . '-iquote ' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/makefile_project/subdir'))
  \   . ' -I' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/makefile_project/include'))
  \   . ' -'

Execute(The C++ GCC handler should include 'include' directories for projects with a configure file):
  call ale#assert#SetUpLinterTest('cpp', 'gcc')
  call ale#test#SetFilename('../test_c_projects/configure_project/subdir/file.cpp')
  let g:ale_cpp_gcc_options = ''

  AssertLinter 'gcc',
  \   ale#Escape('gcc')
  \   . ' -S -x c++ -fsyntax-only '
  \   . '-iquote ' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/configure_project/subdir'))
  \   . ' -I' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/configure_project/include'))
  \   . ' -'

Execute(The C++ GCC handler should include root directories for projects with .h files in them):
  call ale#assert#SetUpLinterTest('cpp', 'gcc')
  call ale#test#SetFilename('../test_c_projects/h_file_project/subdir/file.cpp')
  let g:ale_cpp_gcc_options = ''

  AssertLinter 'gcc',
  \   ale#Escape('gcc')
  \   . ' -S -x c++ -fsyntax-only '
  \   . '-iquote ' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/h_file_project/subdir'))
  \   . ' -I' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/h_file_project'))
  \   . ' -'

Execute(The C++ GCC handler should include root directories for projects with .hpp files in them):
  call ale#assert#SetUpLinterTest('cpp', 'gcc')
  call ale#test#SetFilename('../test_c_projects/hpp_file_project/subdir/file.cpp')
  let g:ale_cpp_gcc_options = ''

  AssertLinter 'gcc',
  \   ale#Escape('gcc')
  \   . ' -S -x c++ -fsyntax-only '
  \   . '-iquote ' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/hpp_file_project/subdir'))
  \   . ' -I' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/hpp_file_project'))
  \   . ' -'

Execute(The C++ Clang handler should include 'include' directories for projects with a Makefile):
  call ale#assert#SetUpLinterTest('cpp', 'clang')
  call ale#test#SetFilename('../test_c_projects/makefile_project/subdir/file.cpp')
  let g:ale_cpp_clang_options = ''

  AssertLinter 'clang++',
  \   ale#Escape('clang++')
  \   . ' -S -x c++ -fsyntax-only '
  \   . '-iquote ' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/makefile_project/subdir'))
  \   . ' -I' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/makefile_project/include'))
  \   . ' -'

Execute(The C++ Clang handler should include 'include' directories for projects with a configure file):
  call ale#assert#SetUpLinterTest('cpp', 'clang')
  call ale#test#SetFilename('../test_c_projects/configure_project/subdir/file.cpp')
  let g:ale_cpp_clang_options = ''

  AssertLinter 'clang++',
  \   ale#Escape('clang++')
  \   . ' -S -x c++ -fsyntax-only '
  \   . '-iquote ' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/configure_project/subdir'))
  \   . ' -I' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/configure_project/include'))
  \   . ' -'

Execute(The C++ Clang handler should include root directories for projects with .h files in them):
  call ale#assert#SetUpLinterTest('cpp', 'clang')
  call ale#test#SetFilename('../test_c_projects/h_file_project/subdir/file.cpp')
  let g:ale_cpp_clang_options = ''

  AssertLinter 'clang++',
  \   ale#Escape('clang++')
  \   . ' -S -x c++ -fsyntax-only '
  \   . '-iquote ' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/h_file_project/subdir'))
  \   . ' -I' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/h_file_project'))
  \   . ' -'

Execute(The C++ Clang handler should include root directories for projects with .hpp files in them):
  call ale#assert#SetUpLinterTest('cpp', 'clang')
  call ale#test#SetFilename('../test_c_projects/hpp_file_project/subdir/file.cpp')
  let g:ale_cpp_clang_options = ''

  AssertLinter 'clang++',
  \   ale#Escape('clang++')
  \   . ' -S -x c++ -fsyntax-only '
  \   . '-iquote ' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/hpp_file_project/subdir'))
  \   . ' -I' . ale#Escape(ale#path#Simplify(g:dir .  '/../test_c_projects/hpp_file_project'))
  \   . ' -'

Execute(The C++ ClangTidy handler should include json folders for projects with suitable build directory in them):
  call ale#assert#SetUpLinterTest('cpp', 'clangtidy')
  call ale#test#SetFilename('../test_c_projects/json_project/subdir/file.cpp')

  AssertLinter 'clang-tidy',
  \ ale#Escape('clang-tidy')
  \   . ' %s '
  \   . '-p ' . ale#Escape(ale#path#Simplify(g:dir . '/../test_c_projects/json_project/build'))
