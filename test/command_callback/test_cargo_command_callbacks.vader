Before:
  Save g:ale_rust_cargo_use_check
  Save g:ale_rust_cargo_check_all_targets
  Save g:ale_rust_cargo_default_feature_behavior
  Save g:ale_rust_cargo_include_features

  unlet! g:ale_rust_cargo_use_check
  unlet! g:ale_cargo_check_all_targets
  unlet! g:ale_rust_cargo_default_feature_behavior
  unlet! g:ale_rust_cargo_include_features

  runtime ale_linters/rust/cargo.vim
  call ale#test#SetDirectory('/testplugin/test/command_callback')

  let g:suffix = ' --frozen --message-format=json -q'

After:
  Restore

  unlet! g:suffix

  call ale#test#RestoreDirectory()
  call ale#linter#Reset()
  call ale#semver#ResetVersionCache()

Execute(An empty string should be returned for the cargo executable when there's no Cargo.toml file):
  AssertEqual
  \ '',
  \ ale_linters#rust#cargo#GetCargoExecutable(bufnr(''))

Execute(The executable should be returned when there is a Cargo.toml file):
  call ale#test#SetFilename('cargo_paths/test.rs')

  AssertEqual
  \ 'cargo',
  \ ale_linters#rust#cargo#GetCargoExecutable(bufnr(''))

Execute(The VersionCheck function should return the --version command):
  AssertEqual
  \ 'cargo --version',
  \ ale_linters#rust#cargo#VersionCheck(bufnr(''))

Execute(The default command should be correct):
  AssertEqual
  \ 'cargo build' . g:suffix,
  \ ale_linters#rust#cargo#GetCommand(bufnr(''), [])

Execute(`cargo check` should be used when the version is new enough):
  AssertEqual
  \ 'cargo check' . g:suffix,
  \ ale_linters#rust#cargo#GetCommand(bufnr(''), [
  \   'cargo 0.17.0 (3423351a5 2017-10-06)',
  \ ])

  " We should cache the version check
  AssertEqual
  \ 'cargo check' . g:suffix,
  \ ale_linters#rust#cargo#GetCommand(bufnr(''), [])

  AssertEqual '', ale_linters#rust#cargo#VersionCheck(bufnr(''))

Execute(`cargo build` should be used when cargo is too old):
  AssertEqual
  \ 'cargo build' . g:suffix,
  \ ale_linters#rust#cargo#GetCommand(bufnr(''), [
  \   'cargo 0.16.0 (3423351a5 2017-10-06)',
  \ ])

  " We should cache the version check
  AssertEqual
  \ 'cargo build' . g:suffix,
  \ ale_linters#rust#cargo#GetCommand(bufnr(''), [])

  AssertEqual '', ale_linters#rust#cargo#VersionCheck(bufnr(''))

Execute(`cargo build` should be used when g:ale_rust_cargo_use_check is set to 0):
  let g:ale_rust_cargo_use_check = 0

  AssertEqual
  \ 'cargo build' . g:suffix,
  \ ale_linters#rust#cargo#GetCommand(bufnr(''), [
  \   'cargo 0.24.0 (3423351a5 2017-10-06)',
  \ ])

  " We should cache the version check
  AssertEqual
  \ 'cargo build' . g:suffix,
  \ ale_linters#rust#cargo#GetCommand(bufnr(''), [])

  AssertEqual '', ale_linters#rust#cargo#VersionCheck(bufnr(''))

Execute(`cargo check` should be used when the version is new enough):
  AssertEqual
  \ 'cargo check' . g:suffix,
  \ ale_linters#rust#cargo#GetCommand(bufnr(''), [
  \   'cargo 0.22.0 (3423351a5 2017-10-06)',
  \ ])

  " We should cache the version check
  AssertEqual
  \ 'cargo check' . g:suffix,
  \ ale_linters#rust#cargo#GetCommand(bufnr(''), [])

  AssertEqual '', ale_linters#rust#cargo#VersionCheck(bufnr(''))

Execute(--all-targets should be used when g:ale_rust_cargo_check_all_targets is set to 1):
  let g:ale_rust_cargo_check_all_targets = 1

  AssertEqual
  \ 'cargo check --all-targets' . g:suffix,
  \ ale_linters#rust#cargo#GetCommand(bufnr(''), [
  \   'cargo 0.22.0 (3423351a5 2017-10-06)',
  \ ])

  " We should cache the version check
  AssertEqual
  \ 'cargo check --all-targets' . g:suffix,
  \ ale_linters#rust#cargo#GetCommand(bufnr(''), [])

  AssertEqual '', ale_linters#rust#cargo#VersionCheck(bufnr(''))

Execute(--no-default-features should be used when g:ale_rust_cargo_default_feature_behavior is none):
  let g:ale_rust_cargo_default_feature_behavior = 'none'

  AssertEqual
  \ 'cargo check' . g:suffix . ' --no-default-features',
  \ ale_linters#rust#cargo#GetCommand(bufnr(''), [
  \   'cargo 0.22.0 (3423351a5 2017-10-06)',
  \ ])

Execute(g:ale_rust_cargo_include_features added when g:ale_rust_cargo_default_feature_behavior is none):
  let g:ale_rust_cargo_default_feature_behavior = 'none'
  let g:ale_rust_cargo_include_features = 'foo bar'

  AssertEqual
  \ 'cargo check' . g:suffix . ' --no-default-features --features ' .
  \ (fnamemodify(&shell, ':t') is? 'cmd.exe' ? '"foo bar"' : "'foo bar'"),
  \ ale_linters#rust#cargo#GetCommand(bufnr(''), [
  \   'cargo 0.22.0 (3423351a5 2017-10-06)',
  \ ])

Execute(g:ale_rust_cargo_include_features added and escaped):
  let g:ale_rust_cargo_default_feature_behavior = 'default'
  let g:ale_rust_cargo_include_features = "foo bar baz"

  AssertEqual
  \ 'cargo check' . g:suffix . ' --features ' .
  \ (fnamemodify(&shell, ':t') is? 'cmd.exe' ? '"foo bar baz"' : "'foo bar baz'"),
  \ ale_linters#rust#cargo#GetCommand(bufnr(''), [
  \   'cargo 0.22.0 (3423351a5 2017-10-06)',
  \ ])

Execute(--all-features should be used when g:ale_rust_cargo_default_feature_behavior is all):
  let g:ale_rust_cargo_default_feature_behavior = 'all'

  " When all features are enabled we should ignore extra features to add
  " since it won't do anything
  let g:ale_rust_cargo_include_features = 'foo bar'

  AssertEqual
  \ 'cargo check' . g:suffix . ' --all-features',
  \ ale_linters#rust#cargo#GetCommand(bufnr(''), [
  \   'cargo 0.22.0 (3423351a5 2017-10-06)',
  \ ])
