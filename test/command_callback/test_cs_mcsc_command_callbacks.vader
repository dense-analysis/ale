Before:
  call ale#assert#SetUpLinterTest('cs', 'mcsc')

After:
  call ale#assert#TearDownLinterTest()

Execute(The mcsc linter should return the correct default command):
  AssertLinter 'mcs', ale#path#CdString(g:dir)
  \ . 'mcs -unsafe -out:TEMP -t:module -recurse:' . ale#Escape('*.cs')

Execute(The options should be be used in the command):
  let g:ale_cs_mcsc_options = '-pkg:dotnet'

  AssertLinter 'mcs', ale#path#CdString(g:dir)
  \ . 'mcs -unsafe -pkg:dotnet -out:TEMP -t:module -recurse:' . ale#Escape('*.cs')

Execute(The souce path should be be used in the command):
  let g:ale_cs_mcsc_source = '../foo/bar'

  AssertLinter 'mcs', ale#path#CdString('../foo/bar')
  \ . 'mcs -unsafe -out:TEMP -t:module -recurse:' . ale#Escape('*.cs')

Execute(The list of search pathes for assemblies should be be used in the command if not empty):
  let g:ale_cs_mcsc_assembly_path = ['/usr/lib/mono', '../foo/bar']

  AssertLinter 'mcs', ale#path#CdString(g:dir)
  \ . 'mcs -unsafe'
  \ . ' -lib:' . ale#Escape('/usr/lib/mono') . ',' . ale#Escape('../foo/bar')
  \ . ' -out:TEMP -t:module -recurse:' . ale#Escape('*.cs')

  let g:ale_cs_mcsc_assembly_path = []

  AssertLinter 'mcs', ale#path#CdString(g:dir)
  \ . 'mcs -unsafe -out:TEMP -t:module -recurse:' . ale#Escape('*.cs')

Execute(The list of assemblies should be be used in the command if not empty):
  let g:ale_cs_mcsc_assemblies = ['foo.dll', 'bar.dll']

  AssertLinter 'mcs', ale#path#CdString(g:dir)
  \ . 'mcs -unsafe'
  \ . ' -r:' . ale#Escape('foo.dll') . ',' . ale#Escape('bar.dll')
  \ . ' -out:TEMP -t:module -recurse:' . ale#Escape('*.cs')

  let g:ale_cs_mcsc_assemblies = []

  AssertLinter 'mcs', ale#path#CdString(g:dir)
  \ . 'mcs -unsafe -out:TEMP -t:module -recurse:' . ale#Escape('*.cs')
