Before:
  call ale#assert#SetUpLinterTest('elm', 'make')

After:
  unlet! g:executable

  call ale#assert#TearDownLinterTest()

Execute(should get valid executable with default params):
  call ale#test#SetFilename('../elm-test-files/newapp/src/Main.elm')

  let g:executable = ale#path#Simplify(g:dir . '/../elm-test-files/newapp/node_modules/.bin/elm')

  AssertLinter g:executable,
  \ 'cd ' . ale#Escape(ale#path#Simplify(g:dir . '/../elm-test-files/newapp')) . ' && '
  \ . ale#Escape(g:executable) . ' make --report=json --output=/dev/null %t'

Execute(should get elm-test executable for test code with elm >= 0.19):
  call ale#test#SetFilename('../elm-test-files/newapp/tests/TestSuite.elm')

  let g:executable = ale#path#Simplify(g:dir . '/../elm-test-files/newapp/node_modules/.bin/elm-test')

  AssertLinter g:executable,
  \ 'cd ' . ale#Escape(ale#path#Simplify(g:dir . '/../elm-test-files/newapp')) . ' && '
  \ . ale#Escape(g:executable) . ' make --report=json --output=/dev/null --compiler '
  \ . ale#path#Simplify(g:dir . '/../elm-test-files/newapp/node_modules/.bin/elm') . ' %t'

Execute(should fallback to elm executable with elm >= 0.19):
  call ale#test#SetFilename('../elm-test-files/newapp-notests/tests/TestMain.elm')

  let g:executable = ale#path#Simplify(g:dir . '/../elm-test-files/newapp-notests/node_modules/.bin/elm')

  AssertLinter g:executable,
  \ 'cd ' . ale#Escape(ale#path#Simplify(g:dir . '/../elm-test-files/newapp-notests')) . ' && '
  \ . ale#Escape(g:executable) . ' make --report=json --output=/dev/null %t'

Execute(should get plain elm executable for test code with elm < 0.19):
  call ale#test#SetFilename('../elm-test-files/oldapp/tests/TestSuite.elm')

  let g:executable = ale#path#Simplify(g:dir . '/../elm-test-files/oldapp/node_modules/.bin/elm')

  AssertLinter g:executable,
  \ 'cd ' . ale#Escape(ale#path#Simplify(g:dir . '/../elm-test-files/oldapp')) . ' && '
  \ . ale#Escape(g:executable) . ' make --report=json --output=/dev/null %t'

Execute(should get valid executable with 'use_global' params):
  let g:ale_elm_make_use_global = 1

  call ale#test#SetFilename('../elm-test-files/newapp/src/Main.elm')

  AssertLinter 'elm',
  \ 'cd ' . ale#Escape(ale#path#Simplify(g:dir . '/../elm-test-files/newapp')) . ' && '
  \ . ale#Escape('elm') . ' make --report=json --output=/dev/null %t'

Execute(should get valid executable with 'use_global' and 'executable' params):
  let g:ale_elm_make_executable = 'other-elm'
  let g:ale_elm_make_use_global = 1

  call ale#test#SetFilename('../elm-test-files/newapp/src/Main.elm')

  AssertLinter 'other-elm',
  \ 'cd ' . ale#Escape(ale#path#Simplify(g:dir . '/../elm-test-files/newapp')) . ' && '
  \ . ale#Escape('other-elm') . ' make --report=json --output=/dev/null %t'
