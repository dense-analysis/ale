Before:
  call ale#assert#SetUpLinterTest('python', 'pyright')
  Save b:ale_python_auto_virtualenv

  let b:bin_dir = has('win32') ? 'Scripts' : 'bin'

After:
  unlet! b:bin_dir
  unlet! b:venv_bin
  unlet! b:sep
  unlet! b:executable

  call ale#test#SetFilename('..')
  call ale#assert#TearDownLinterTest()

Execute(The command callback should return the correct default string):
  call ale#test#SetFilename('./foo.py')

  AssertLinter
  \ 'pyright-langserver',
  \ ale#Escape('pyright-langserver') . ' --stdio'

Execute(The executable should be configurable):
  let g:ale_python_pyright_executable = '/bin/foo-bar'

  AssertLinter
  \ '/bin/foo-bar',
  \ ale#Escape('/bin/foo-bar') . ' --stdio'

Execute(The default configuration should be mostly empty):
  " The default configuration needs to have at least one key in it,
  " or the server won't start up properly.
  AssertLSPConfig {'python': {}}

  let b:ale_python_pyright_config = {}

  AssertLSPConfig {'python': {}}

Execute(The cwd and project root should be detected correctly):
  call ale#test#SetFilename('../test-files/python/with_virtualenv/subdir/foo/bar.py')

  AssertLinterCwd ale#test#GetFilename('../test-files/python/with_virtualenv/subdir')
  AssertLSPProject ale#test#GetFilename('../test-files/python/with_virtualenv/subdir')

Execute(virtualenv paths should be set in configuration by default):
  call ale#test#SetFilename('../test-files/python/with_virtualenv/subdir/foo/bar.py')

  AssertLSPConfig {
  \ 'python': {
  \   'pythonPath': ale#path#Simplify(g:dir . '/../test-files/python/with_virtualenv/env/' . b:bin_dir . '/python'),
  \   'venvPath': ale#path#Simplify(g:dir . '/../test-files/python/with_virtualenv/env'),
  \ },
  \}

Execute(The pythonPath should be set based on whatever the override for the venvPath is set to):
  call ale#test#SetFilename('../test-files/python/with_virtualenv/subdir/foo/bar.py')

  " This overrides the default detection of the path.
  let b:ale_python_pyright_config = {
  \ 'python': {
  \   'venvPath': '/foo/bar',
  \ },
  \}

  AssertLSPConfig {
  \ 'python': {
  \   'pythonPath': ale#path#Simplify('/foo/bar/' . b:bin_dir . '/python'),
  \   'venvPath': '/foo/bar',
  \ },
  \}

Execute(You should be able to override pythonPath when venvPath is detected):
  call ale#test#SetFilename('../test-files/python/with_virtualenv/subdir/foo/bar.py')

  " This overrides the default detection of the path.
  let b:ale_python_pyright_config = {
  \ 'python': {
  \   'pythonPath': '/bin/python',
  \ },
  \}

  AssertLSPConfig {
  \ 'python': {
  \   'pythonPath': '/bin/python',
  \   'venvPath': ale#path#Simplify(g:dir . '/../test-files/python/with_virtualenv/env'),
  \ },
  \}

Execute(You should be able to override both pythonPath and venvPath):
  call ale#test#SetFilename('../test-files/python/with_virtualenv/subdir/foo/bar.py')

  " This overrides the default detection of the path.
  let b:ale_python_pyright_config = {
  \ 'python': {
  \   'pythonPath': '/bin/python',
  \   'venvPath': '/other/dir',
  \ },
  \}

  AssertLSPConfig {
  \ 'python': {
  \   'pythonPath': '/bin/python',
  \   'venvPath': '/other/dir',
  \ },
  \}

Execute(You should be able to define other settings):
  call ale#test#SetFilename('../test-files/python/with_virtualenv/subdir/foo/bar.py')

  let b:ale_python_pyright_config = {
  \ 'python': {
  \   'analysis': {'logLevel': 'warning'},
  \ },
  \ 'pyright': {
  \   'disableLanguageServices': v:true,
  \ },
  \}

  AssertLSPConfig {
  \ 'python': {
  \   'analysis': {'logLevel': 'warning'},
  \   'pythonPath': ale#path#Simplify(g:dir . '/../test-files/python/with_virtualenv/env/' . b:bin_dir . '/python'),
  \   'venvPath': ale#path#Simplify(g:dir . '/../test-files/python/with_virtualenv/env'),
  \ },
  \ 'pyright': {
  \   'disableLanguageServices': v:true,
  \ },
  \}

Execute(The pyright callbacks should detect virtualenv directories):
  call ale#test#SetFilename('../test-files/python/with_virtualenv/subdir/foo/bar.py')

  let b:executable = ale#path#Simplify(
  \ g:dir . '/../test-files/python/with_virtualenv/env/' . b:bin_dir . '/pyright-langserver'
  \)

  AssertLinter b:executable, ale#Escape(b:executable) . ' --stdio'

Execute(virtualenv vars should be used when ale_python_auto_virtualenv = 1):
  let b:ale_python_auto_virtualenv = 1
  call ale#test#SetFilename('../test-files/python/with_virtualenv/subdir/foo/bar.py')

  let b:venv_bin = ale#path#Simplify(g:dir . '/../test-files/python/with_virtualenv/env/' . b:bin_dir)
  let b:sep = has('win32') ? ';' : ':'
  let b:executable = ale#path#Simplify(b:venv_bin . '/pyright-langserver')

  AssertLinter b:executable, ale#python#AutoVirtualenvEnvString(bufnr(''))
  \   . ale#Escape(b:executable) . ' --stdio'
  Assert !empty(ale#python#AutoVirtualenvEnvString(bufnr('')))

Execute(Setting executable to 'pipenv' should append 'run pyright-langserver'):
  call ale#test#SetFilename('../test-files')

  let g:ale_python_pyright_executable = 'path/to/pipenv'

  GivenCommandOutput []
  AssertLinter 'path/to/pipenv',
  \ ale#Escape('path/to/pipenv') . ' run pyright-langserver --stdio'

Execute(Pipenv is detected when python_pyright_auto_pipenv is set):
  let g:ale_python_pyright_auto_pipenv = 1
  call ale#test#SetFilename('../test-files/python/pipenv/whatever.py')

  AssertLinterCwd ale#python#FindProjectRootIni(bufnr(''))
  AssertLinter 'pipenv',
  \ ale#Escape('pipenv') . ' run pyright-langserver --stdio'

Execute(Setting executable to 'poetry' should append 'run pyright-langserver'):
  let g:ale_python_pyright_executable = 'path/to/poetry'

  GivenCommandOutput []
  AssertLinter 'path/to/poetry',
  \ ale#Escape('path/to/poetry') . ' run pyright-langserver --stdio'

Execute(poetry is detected when python_pyright_auto_poetry is set):
  let g:ale_python_pyright_auto_poetry = 1
  call ale#test#SetFilename('../test-files/python/poetry/whatever.py')

  AssertLinterCwd ale#python#FindProjectRootIni(bufnr(''))
  AssertLinter 'poetry',
  \ ale#Escape('poetry') . ' run pyright-langserver --stdio'
