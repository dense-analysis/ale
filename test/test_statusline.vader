Before:
  Save g:ale_statusline_format
  Save g:ale_buffer_info

  let g:ale_buffer_info = {}

  " A function for conveniently creating expected count objects.
  function! Counts(data) abort
    let l:res = {
    \   '0': 0,
    \   '1': 0,
    \   'error': 0,
    \   'warning': 0,
    \   'info': 0,
    \   'style_error': 0,
    \   'style_warning': 0,
    \   'total': 0,
    \}

    for l:key in keys(a:data)
      let l:res[l:key] = a:data[l:key]
    endfor

    let l:res[0] = l:res.error + l:res.style_error
    let l:res[1] = l:res.warning + l:res.style_warning + l:res.info
    let l:res.total = l:res[0] + l:res[1]

    return l:res
  endfunction

After:
  Restore

  delfunction Counts

Execute (Count should be 0 when data is empty):
  AssertEqual Counts({}), ale#statusline#Count(bufnr(''))

Execute (Count should read data from the cache):
  let g:ale_buffer_info = {'44': {'count': Counts({'error': 1, 'warning': 2})}}
  AssertEqual Counts({'error': 1, 'warning': 2}), ale#statusline#Count(44)

Execute (The count should be correct after an update):
  let g:ale_buffer_info = {'44': {}}
  call ale#statusline#Update(44, [])
  AssertEqual Counts({}), ale#statusline#Count(44)

Execute (Count should be match the loclist):
  let g:ale_buffer_info = {
  \ bufnr(''): {
  \   'loclist': [
  \     {'bufnr': bufnr('') - 1, 'type': 'E'},
  \     {'bufnr': bufnr('') - 1, 'type': 'E', 'sub_type': 'style'},
  \     {'bufnr': bufnr('') - 1, 'type': 'W'},
  \     {'bufnr': bufnr('') - 1, 'type': 'W', 'sub_type': 'style'},
  \     {'bufnr': bufnr('') - 1, 'type': 'I'},
  \     {'bufnr': bufnr(''), 'type': 'E'},
  \     {'bufnr': bufnr(''), 'type': 'E', 'sub_type': 'style'},
  \     {'bufnr': bufnr(''), 'type': 'E', 'sub_type': 'style'},
  \     {'bufnr': bufnr(''), 'type': 'W'},
  \     {'bufnr': bufnr(''), 'type': 'W'},
  \     {'bufnr': bufnr(''), 'type': 'W'},
  \     {'bufnr': bufnr(''), 'type': 'W', 'sub_type': 'style'},
  \     {'bufnr': bufnr(''), 'type': 'W', 'sub_type': 'style'},
  \     {'bufnr': bufnr(''), 'type': 'W', 'sub_type': 'style'},
  \     {'bufnr': bufnr(''), 'type': 'W', 'sub_type': 'style'},
  \     {'bufnr': bufnr(''), 'type': 'I'},
  \     {'bufnr': bufnr(''), 'type': 'I'},
  \     {'bufnr': bufnr(''), 'type': 'I'},
  \     {'bufnr': bufnr(''), 'type': 'I'},
  \     {'bufnr': bufnr(''), 'type': 'I'},
  \     {'bufnr': bufnr('') + 1, 'type': 'E'},
  \     {'bufnr': bufnr('') + 1, 'type': 'E', 'sub_type': 'style'},
  \     {'bufnr': bufnr('') + 1, 'type': 'W'},
  \     {'bufnr': bufnr('') + 1, 'type': 'W', 'sub_type': 'style'},
  \     {'bufnr': bufnr('') + 1, 'type': 'I'},
  \   ],
  \ },
  \}
  AssertEqual {
  \ 'error': 1,
  \ 'style_error': 2,
  \ 'warning': 3,
  \ 'style_warning': 4,
  \ 'info': 5,
  \ '0': 3,
  \ '1': 12,
  \ 'total': 15,
  \}, ale#statusline#Count(bufnr(''))

Execute (Output should be empty for non-existent buffer):
  AssertEqual Counts({}), ale#statusline#Count(9001)

Execute (Status() should return just errors for the old format):
  let g:ale_statusline_format = ['%sE', '%sW', 'OKIE']
  let g:ale_buffer_info = {bufnr(''): {}}
  call ale#statusline#Update(bufnr(''), [
  \ {'bufnr': bufnr(''), 'type': 'E'},
  \ {'bufnr': bufnr(''), 'type': 'E', 'sub_type': 'style'},
  \])
  AssertEqual '2E', ale#statusline#Status()

Execute (Status() should return just warnings for the old format):
  let g:ale_statusline_format = ['%sE', '%sW', 'OKIE']
  let g:ale_buffer_info = {bufnr(''): {}}
  call ale#statusline#Update(bufnr(''), [
  \ {'bufnr': bufnr(''), 'type': 'W'},
  \ {'bufnr': bufnr(''), 'type': 'W', 'sub_type': 'style'},
  \ {'bufnr': bufnr(''), 'type': 'I'},
  \])
  AssertEqual '3W', ale#statusline#Status()

Execute (Status() should return errors and warnings for the old format):
  let g:ale_statusline_format = ['%sE', '%sW', 'OKIE']
  let g:ale_buffer_info = {bufnr(''): {}}
  call ale#statusline#Update(bufnr(''), [
  \ {'bufnr': bufnr(''), 'type': 'E'},
  \ {'bufnr': bufnr(''), 'type': 'E', 'sub_type': 'style'},
  \ {'bufnr': bufnr(''), 'type': 'W'},
  \ {'bufnr': bufnr(''), 'type': 'W', 'sub_type': 'style'},
  \ {'bufnr': bufnr(''), 'type': 'I'},
  \])
  AssertEqual '2E 3W', ale#statusline#Status()

Execute (Status() should return the custom 'OK' string with the old format):
  let g:ale_statusline_format = ['%sE', '%sW', 'OKIE']
  let g:ale_buffer_info = {bufnr(''): {}}
  call ale#statusline#Update(bufnr(''), [])
  AssertEqual 'OKIE', ale#statusline#Status()

Execute(ale#statusline#Update shouldn't blow up when globals are undefined):
  unlet! g:ale_statusline_format
  call ale#statusline#Update(1, [])

Execute(ale#statusline#Count should return 0 counts when globals are undefined):
  unlet! g:ale_statusline_format
  AssertEqual Counts({}), ale#statusline#Count(1)

Execute(ale#statusline#Status should return 'OK' when globals are undefined):
  unlet! g:ale_statusline_format
  AssertEqual 'OK', ale#statusline#Status()
